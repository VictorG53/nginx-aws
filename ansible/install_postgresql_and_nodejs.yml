---
- name: Installer et configurer PostgreSQL pour l'application todos
  hosts: all
  become: yes
  vars:
    pg_user: todo_user
    pg_db: todos
    pg_password: todo_super_secret_password

  tasks:
    - name: Installer PostgreSQL
      apt:
        name: postgresql
        state: present
        update_cache: yes

    - name: S'assurer que le service PostgreSQL est démarré
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Installer le package python pour PostgreSQL
      apt:
        name: python3-psycopg2
        state: present

    - name: Récupérer la version de PostgreSQL installée
      shell: "psql --version | awk '{print $3}' | cut -d. -f1,2"
      register: pg_version
      changed_when: false

    - name: Définir le chemin du pg_hba.conf
      set_fact:
        pg_hba_path: "/etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf"
      when: ansible_facts['os_family'] == 'Debian'

    - name: Autoriser l'authentification md5 pour l'utilisateur postgres
      replace:
        path: "{{ pg_hba_path }}"
        regexp: '^local\s+all\s+postgres\s+peer'
        replace: "local   all             postgres                                md5"
      notify: Redémarrer PostgreSQL
      when: ansible_facts['os_family'] == 'Debian'

    - name: Redémarrer PostgreSQL pour prise en compte du md5
      service:
        name: postgresql
        state: restarted
      when: ansible_facts['os_family'] == 'Debian'

    - name: Définir le mot de passe de l'utilisateur postgres
      community.postgresql.postgresql_user:
        name: postgres
        password: "{{ pg_password }}"
        role_attr_flags: "SUPERUSER"
      become: true
      become_user: postgres
      when: ansible_facts['os_family'] == 'Debian'

    - name: Créer l'utilisateur PostgreSQL
      community.postgresql.postgresql_user:
        name: "{{ pg_user }}"
        password: "{{ pg_password }}"
        state: present

    - name: Créer la base de données PostgreSQL
      community.postgresql.postgresql_db:
        name: "{{ pg_db }}"
        owner: "{{ pg_user }}"
        state: present

    - name: Créer la table todos
      community.postgresql.postgresql_query:
        db: "{{ pg_db }}"
        query: |
          CREATE TABLE IF NOT EXISTS todos (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            completed BOOLEAN NOT NULL DEFAULT FALSE
          );

  handlers:
    - name: Redémarrer PostgreSQL
      service:
        name: postgresql
        state: restarted
