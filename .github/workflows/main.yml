name: deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  checkov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov on Terraform code
        run: checkov -d ./terraform
  terraform-prepare:
    runs-on: ubuntu-latest
    needs: checkov
    environment: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Terraform Plan
        run: terraform -chdir=./terraform plan

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-prepare
    environment: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Terraform Apply
        run: terraform -chdir=./terraform apply -auto-approve

  terraform-post:
    runs-on: ubuntu-latest
    needs: terraform-apply
    environment: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Get instance IP
        id: get_ip
        run: |
          IP_PUBLIC=$(terraform -chdir=./terraform output -raw instance_ip)
          echo "$IP_PUBLIC" > instance_ip.txt

      - name: Upload instance IP
        uses: actions/upload-artifact@v4
        with:
          name: instance_ip
          path: instance_ip.txt

      - name: Get private instance IP
        id: get_private_ip
        run: |
          IP_PRIVATE=$(terraform -chdir=./terraform output -raw instance_ip_private)
          echo "$IP_PRIVATE" > instance_ip_private.txt

      - name: Upload private instance IP
        uses: actions/upload-artifact@v4
        with:
          name: instance_ip_private
          path: instance_ip_private.txt

  ansible-nginx:
    runs-on: ubuntu-latest
    needs: terraform-post
    environment: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: pip install ansible

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/iia-2025.pem
          chmod 400 ~/.ssh/iia-2025.pem

      - name: Download instance IP
        uses: actions/download-artifact@v4
        with:
          name: instance_ip

      - name: Read instance IP
        id: read_ip
        run: |
          IP=$(cat instance_ip.txt)
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV

      - name: Add instance to known_hosts
        run: |
          ssh-keygen -R $INSTANCE_IP || true
          until ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts 2>/dev/null; do
            echo "Attente que l’instance soit prête..."
            sleep 2
          done

      - name: Create Ansible inventory
        run: |
          echo "$INSTANCE_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/iia-2025.pem" > hosts

      - name: Copy api files to instance
        run: |
          rsync -avz -e "ssh -i ~/.ssh/iia-2025.pem -o StrictHostKeyChecking=no" ./api/ ubuntu@$INSTANCE_IP:/home/ubuntu/api/
      - name: Copy todolist-app files to instance
        run: |
          rsync -avz -e "ssh -i ~/.ssh/iia-2025.pem -o StrictHostKeyChecking=no" ./todolist-app/ ubuntu@$INSTANCE_IP:/home/ubuntu/todolist-app/
      - name: Download private instance IP
        uses: actions/download-artifact@v4
        with:
          name: instance_ip_private

      - name: Export INSTANCE_IP_PRIVATE
        run: |
          export INSTANCE_IP_PRIVATE=$(cat instance_ip_private.txt)
          echo "INSTANCE_IP_PRIVATE=$INSTANCE_IP_PRIVATE" >> $GITHUB_ENV

      - name: Run Ansible playbook
        run: ansible-playbook -i hosts ./ansible/install_nginx.yml

  ansible-postgresql:
    runs-on: ubuntu-latest
    needs: terraform-post
    environment: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: pip install ansible

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/iia-2025.pem
          chmod 400 ~/.ssh/iia-2025.pem

      - name: Download private instance IP
        uses: actions/download-artifact@v4
        with:
          name: instance_ip_private

      - name: Download public instance IP
        uses: actions/download-artifact@v4
        with:
          name: instance_ip

      - name: Read instance IPs
        id: read_ips
        run: |
          IP_PRIVATE=$(cat instance_ip_private.txt)
          IP_PUBLIC=$(cat instance_ip.txt)
          echo "INSTANCE_IP_PRIVATE=$IP_PRIVATE" >> $GITHUB_ENV
          echo "INSTANCE_IP_PUBLIC=$IP_PUBLIC" >> $GITHUB_ENV

      - name: Add public instance to known_hosts
        run: |
          ssh-keygen -R $INSTANCE_IP_PUBLIC || true
          until ssh-keyscan -H $INSTANCE_IP_PUBLIC >> ~/.ssh/known_hosts 2>/dev/null; do
            echo "Attente que l’instance publique soit prête..."
            sleep 2
          done

      - name: Copy Ansible playbook and inventory to public instance
        run: |
          echo "$INSTANCE_IP_PRIVATE ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/iia-2025.pem" > hosts_private
          scp -i ~/.ssh/iia-2025.pem -o StrictHostKeyChecking=no ./ansible/install_postgresql_and_nodejs.yml ubuntu@$INSTANCE_IP_PUBLIC:/home/ubuntu/
          scp -i ~/.ssh/iia-2025.pem -o StrictHostKeyChecking=no hosts_private ubuntu@$INSTANCE_IP_PUBLIC:/home/ubuntu/

      - name: Run Ansible playbook from public instance to private instance
        run: |
          ssh -i ~/.ssh/iia-2025.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP_PUBLIC "
            sudo apt-get update && sudo apt-get install -y python3-pip
            pip3 install ansible
            cd /home/ubuntu
            ansible-playbook -i hosts_private install_postgresql_and_nodejs.yml --become --become-user=root
          "
